generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          String       @default("ADMIN")

  accounts      Account[]
  sessions      Session[]
  quotations    Quotation[]

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum BusinessStatus {
  OPEN
  CLOSED
  TEMP_CLOSED
}

model BusinessProfile {
  id              Int             @id @default(1)
  businessName    String
  address         String?
  primaryPhone    String?
  secondaryPhone  String?
  ownerName       String?
  managerName     String?
  about           String?         @db.Text
  logoUrl         String?
  openingTime     String?
  closingTime     String?
  status          BusinessStatus  @default(OPEN)

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Service {
  id          String  @id @default(cuid())
  title       String
  description String? @db.Text
  imageUrl    String?
  enabled     Boolean @default(true)
  orderIndex  Int?    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Testimonial {
  id          String  @id @default(cuid())
  authorName  String
  content     String  @db.Text
  rating      Int?    @default(5)
  enabled     Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Term {
  id         String  @id @default(cuid())
  content    String  @db.Text
  enabled    Boolean @default(true)
  orderIndex Int?    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum QuotationType {
  DETAILED
  LUMPSUM
}

enum QuotationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Quotation {
  id              String           @id @default(cuid())
  type            QuotationType
  status          QuotationStatus  @default(PENDING)

  customerName    String
  customerPhone   String
  customerAddress String?

  currency        String           @default("INR")
  subtotal        Decimal          @default(0)
  discountAmount  Decimal          @default(0)
  total           Decimal          @default(0)
  notes           String?          @db.Text

  items           QuotationItem[]

  createdById     String?
  createdBy       User?            @relation(fields: [createdById], references: [id])

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model QuotationItem {
  id           String    @id @default(cuid())
  quotationId  String
  description  String

  // For detailed quotations
  areaSqft     Float?
  ratePerSqft  Decimal?
  quantity     Float?    @default(1)

  // For both detailed and lump-sum
  amount       Decimal
  orderIndex   Int?      @default(0)

  quotation    Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}


